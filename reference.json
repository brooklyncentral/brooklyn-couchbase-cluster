{"entities": [{"name": "CouchBase Cluster", "type": "org.apache.brooklyn.entity.nosql.couchbase.CouchbaseCluster", "iconUrl": "", "effectors": [{"returnType": "java.lang.String", "name": "replaceMember", "parameters": [{"defaultValue": null, "type": "java.lang.String", "name": "memberId", "description": "The entity id of a member to be replaced"}], "description": "Replaces the entity with the given ID, if it is a member; first adds a new member, then removes this one. Returns id of the new entity; or throws exception if couldn't be replaced."}, {"returnType": "java.lang.Integer", "name": "resize", "parameters": [{"defaultValue": null, "type": "java.lang.Integer", "name": "desiredSize", "description": "The new size of the cluster"}], "description": "Changes the size of the entity (e.g. the number of nodes in a cluster)"}, {"returnType": "java.util.Collection", "name": "resizeByDelta", "parameters": [{"defaultValue": null, "type": "int", "name": "delta", "description": "The change in number of nodes"}], "description": "Changes the size of the cluster."}, {"returnType": "void", "name": "restart", "parameters": [], "description": "Restart the process/service represented by an entity"}, {"returnType": "void", "name": "start", "parameters": [{"defaultValue": null, "type": "java.lang.Object", "name": "locations", "description": "The location or locations to start in, as a string, a location object, a list of strings, or a list of location objects"}], "description": "Start the process/service represented by an entity"}, {"returnType": "void", "name": "stop", "parameters": [], "description": "Stop the process/service represented by an entity"}], "sensors": [{"type": "org.apache.brooklyn.api.entity.Entity", "name": "cluster.entity", "links": {}, "description": "The cluster an entity is a member of"}, {"type": "java.lang.Boolean", "name": "cluster.first", "links": {}, "description": "Set on an entity if it is the first member of a cluster"}, {"type": "org.apache.brooklyn.api.entity.Entity", "name": "cluster.first.entity", "links": {}, "description": "The first member of the cluster"}, {"type": "java.lang.Boolean", "name": "cluster.member", "links": {}, "description": "Set on an entity if it is a member of a cluster"}, {"type": "java.lang.Boolean", "name": "cluster.one_and_all.members.up", "links": {}, "description": "True cluster is running, there is on member, and all members are service.isUp"}, {"type": "java.lang.Integer", "name": "coucbase.cluster.actualClusterSize", "links": {}, "description": "returns the actual number of nodes in the cluster"}, {"type": "java.lang.Boolean", "name": "couchbase.cluster.bucketCreationInProgress", "links": {}, "description": "Indicates that a bucket is currently being created, andfurther bucket creation should be deferred"}, {"type": "java.util.List", "name": "couchbase.cluster.buckets", "links": {}, "description": "Names of all the buckets the couchbase cluster"}, {"type": "java.util.Set", "name": "couchbase.cluster.clusterEntities", "links": {}, "description": "the set of service up nodes"}, {"type": "java.lang.String", "name": "couchbase.cluster.connection.url", "links": {}, "description": "Couchbase-style URL to connect to the cluster (e.g. http://127.0.0.1:8091/ or couchbase://10.0.0.1,10.0.0.2/)"}, {"type": "java.lang.Boolean", "name": "couchbase.cluster.isClusterInitialized", "links": {}, "description": "flag to emit if the couchbase cluster was intialized"}, {"type": "java.util.List", "name": "couchbase.cluster.node.addresses", "links": {}, "description": "List of host:port of all active nodes in the cluster (http admin port, and public hostname/IP)"}, {"type": "org.apache.brooklyn.api.entity.Entity", "name": "couchbase.cluster.primaryNode", "links": {}, "description": "The primary couchbase node to query and issue add-server and rebalance on"}, {"type": "java.lang.Double", "name": "couchbase.stats.cluster.per.node.cmd.get", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/cmd_get"}, {"type": "java.lang.Long", "name": "couchbase.stats.cluster.per.node.couch.docs.actual.disk.size", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/couch_docs_actual_disk_size"}, {"type": "java.lang.Long", "name": "couchbase.stats.cluster.per.node.couch.docs.data.size", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/couch_docs_data_size"}, {"type": "java.lang.Long", "name": "couchbase.stats.cluster.per.node.couch.views.actual.disk.size", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/couch_views_actual_disk_size"}, {"type": "java.lang.Long", "name": "couchbase.stats.cluster.per.node.couch.views.data.size", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/couch_views_data_size"}, {"type": "java.lang.Double", "name": "couchbase.stats.cluster.per.node.curr.items", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/curr_items"}, {"type": "java.lang.Double", "name": "couchbase.stats.cluster.per.node.curr.items.tot", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/curr_items_tot"}, {"type": "java.lang.Double", "name": "couchbase.stats.cluster.per.node.ep.bg.fetched", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/ep_bg_fetched"}, {"type": "java.lang.Double", "name": "couchbase.stats.cluster.per.node.get.hits", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/get_hits"}, {"type": "java.lang.Long", "name": "couchbase.stats.cluster.per.node.mem.used", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/mem_used"}, {"type": "java.lang.Double", "name": "couchbase.stats.cluster.per.node.ops", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/ops"}, {"type": "java.lang.Double", "name": "couchbase.stats.cluster.per.node.vb.replica.curr.items", "links": {}, "description": "Average across cluster for pools/nodes/<current node>/interestingStats/vb_replica_curr_items"}, {"type": "org.apache.brooklyn.api.entity.Entity", "name": "dynamiccluster.entityQuarantined", "links": {}, "description": "Entity failed to start, and has been quarantined"}, {"type": "java.util.Set", "name": "dynamiccluster.failedSubLocations", "links": {}, "description": "Sub locations that seem to have failed"}, {"type": "org.apache.brooklyn.entity.group.QuarantineGroup", "name": "dynamiccluster.quarantineGroup", "links": {}, "description": "Group of quarantined entities that failed to start"}, {"type": "java.util.List", "name": "dynamiccluster.subLocations", "links": {}, "description": "Locations for each availability zone to use"}, {"type": "java.util.Collection", "name": "group.members", "links": {}, "description": "Members of the group"}, {"type": "org.apache.brooklyn.api.entity.Entity", "name": "group.members.added", "links": {}, "description": "Entity added to group members"}, {"type": "java.lang.Integer", "name": "group.members.count", "links": {}, "description": "Number of members"}, {"type": "org.apache.brooklyn.api.entity.Entity", "name": "group.members.removed", "links": {}, "description": "Entity removed from group members"}, {"type": "java.lang.Boolean", "name": "service.isUp", "links": {}, "description": "Whether the service is active and availability (confirmed and monitored)"}, {"type": "org.apache.brooklyn.core.entity.lifecycle.Lifecycle", "name": "service.state", "links": {}, "description": "Actual lifecycle state of the service"}], "config": [{"defaultValue": -1, "type": "java.lang.Integer", "name": "cluster.initial.quorumSize", "reconfigurable": false, "description": "Initial cluster quorum size - number of initial nodes that must have been successfully started to report success (if < 0, then use value of INITIAL_SIZE)"}, {"defaultValue": 1, "type": "java.lang.Integer", "name": "cluster.initial.size", "reconfigurable": false, "description": "Initial cluster size"}, {"type": "java.lang.Integer", "name": "cluster.member.id", "reconfigurable": false, "description": "The unique ID number (sequential) of a member of a cluster"}, {"defaultValue": "Password", "type": "java.lang.String", "name": "couchbase.adminPassword", "reconfigurable": false, "description": "Password for the admin user on the node"}, {"defaultValue": "Administrator", "type": "java.lang.String", "name": "couchbase.adminUsername", "reconfigurable": false, "description": "Username for the admin user on the node"}, {"type": "java.util.List", "name": "couchbase.cluster.createBuckets", "reconfigurable": false, "description": "a list of all dedicated port buckets to be created on the couchbase cluster"}, {"defaultValue": "10s", "type": "org.apache.brooklyn.util.time.Duration", "name": "couchbase.cluster.delayBeforeAdvertisingCluster", "reconfigurable": false, "description": "Delay after cluster is started before checking and advertising its availability"}, {"defaultValue": -1, "type": "java.lang.Integer", "name": "couchbase.cluster.intialQuorumSize", "reconfigurable": false, "description": "Initial cluster quorum size - number of initial nodes that must have been successfully started to report success (if < 0, then use value of INITIAL_SIZE)"}, {"type": "java.lang.String", "name": "couchbase.cluster.name", "reconfigurable": false, "description": "Optional name for this cluster"}, {"defaultValue": "10s", "type": "org.apache.brooklyn.util.time.Duration", "name": "couchbase.cluster.postStartStabilizationDelay", "reconfigurable": false, "description": "Delay after nodes have been started before treating it as a cluster"}, {"type": "java.util.List", "name": "couchbase.cluster.replicationConfiguration", "reconfigurable": false, "description": "List of replication rules to configure, each rule including target (id of another cluster) and mode (unidirectional or bidirectional)"}, {"type": "java.util.Collection", "name": "dynamiccluster.availabilityZones", "reconfigurable": false, "description": "availability zones to use (if non-null, overrides other configuration)"}, {"defaultValue": {}, "type": "java.util.Map", "name": "dynamiccluster.customChildFlags", "reconfigurable": false, "description": "Additional flags to be passed to children when they are being created"}, {"type": "org.apache.brooklyn.core.entity.factory.EntityFactory", "name": "dynamiccluster.factory", "reconfigurable": false, "description": "factory for creating new cluster members"}, {"type": "org.apache.brooklyn.api.entity.EntitySpec", "name": "dynamiccluster.firstmemberspec", "reconfigurable": false, "description": "entity spec for creating new cluster members, used for the very first member if different"}, {"type": "org.apache.brooklyn.api.entity.EntitySpec", "name": "dynamiccluster.memberspec", "reconfigurable": false, "description": "entity spec for creating new cluster members"}, {"type": "java.lang.Integer", "name": "dynamiccluster.numAvailabilityZones", "reconfigurable": false, "description": "number of availability zones to use (will attempt to auto-discover this number)"}, {"defaultValue": true, "type": "java.lang.Boolean", "name": "dynamiccluster.quarantineFailedEntities", "reconfigurable": false, "description": "If true, will quarantine entities that fail to start; if false, will get rid of them (i.e. delete them)"}, {"type": "com.google.common.base.Predicate", "name": "dynamiccluster.quarantineFilter", "reconfigurable": false, "description": "Quarantine the failed nodes that pass this filter (given the exception thrown by the node). Default is those that did not fail with NoMachinesAvailableException (Config ignored if quarantineFailedEntities is false)"}, {"type": "com.google.common.base.Function", "name": "dynamiccluster.removalstrategy", "reconfigurable": false, "description": "strategy for deciding what to remove when down-sizing"}, {"type": "java.lang.String", "name": "dynamiccluster.restartMode", "reconfigurable": false, "description": "How this cluster should handle restarts; by default it is disallowed, but this key can specify a different mode. Modes supported by dynamic cluster are 'off', 'sequqential', or 'parallel'. However subclasses can define their own modes or may ignore this."}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "dynamiccluster.zone.enable", "reconfigurable": false, "description": "Whether to use availability zones, or just deploy everything into the generic location"}, {"defaultValue": "org.apache.brooklyn.entity.group.zoneaware.ProportionalZoneFailureDetector@30053097", "type": "org.apache.brooklyn.entity.group.DynamicCluster$ZoneFailureDetector", "name": "dynamiccluster.zone.failureDetector", "reconfigurable": false, "description": "Zone failure detector"}, {"defaultValue": "org.apache.brooklyn.entity.group.zoneaware.BalancingNodePlacementStrategy@562ce6ad", "type": "org.apache.brooklyn.entity.group.DynamicCluster$NodePlacementStrategy", "name": "dynamiccluster.zone.placementStrategy", "reconfigurable": false, "description": "Node placement strategy"}, {"defaultValue": "QuorumCheck[all;require=0,100.0%]", "type": "org.apache.brooklyn.util.collections.QuorumCheck", "name": "enricher.service_state.children_and_members.quorum.running", "reconfigurable": false, "description": "Problems check from children actual states (lifecycle), applied by default to members and children, not checking upness, but requiring by default that none are on-fire"}, {"defaultValue": "QuorumCheck[atLeastOne;require=1,0.0%]", "type": "org.apache.brooklyn.util.collections.QuorumCheck", "name": "enricher.service_state.children_and_members.quorum.up", "reconfigurable": false, "description": "Up check, applied by default to members, requiring at least one present and up"}, {"defaultValue": false, "type": "java.lang.Boolean", "name": "group.members.delegate", "reconfigurable": false, "description": "Deprecated: Add delegate child entities for members of the group"}, {"defaultValue": "%s", "type": "java.lang.String", "name": "group.members.delegate.nameFormat", "reconfigurable": false, "description": "Delegate members name format string (Use %s for the original entity display name)"}], "description": "Couchbase is an open source, distributed (shared-nothing architecture) NoSQL document-oriented database that is optimized for interactive applications."}]}